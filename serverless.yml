service: insta-cart-ts-serverless
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs16.x

  # you can overwrite defaults here
  stage: dev
  region: ap-south-1

plugins:
  - serverless-plugin-typescript
# you can add statements to the Lambda function's IAM Role here
iam:
  role:
    statements:
      - Effect: Allow
        Action:
          - 'dynamodb:PutItem'
          - 'dynamodb:GetItem'
          - 'dynamodb:DeleteItem'
          - 'dynamodb:Scan'
        Resource:
          - 'arn:aws:dynamodb:ap-south-1:*:table/instacart'

# you can define service wide environment variables here
# environment:

# you can add packaging information here
#package:
#  patterns:
#    - '!exclude-me.js'
#    - '!exclude-me-dir/**'
#    - include-me.js
#    - include-me-dir/**

functions:
  signup:
    handler: src/server.handler
    events:
      - http: any /
      - http: any /{proxy+}
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
# resources:
#   Resources:
#     instacart:
#       Type: AWS::DynamoDB::Table
#       Properties:
#         TableName: instacart
#         ProvisionedThroughput:
#           ReadCapacityUnits: 1
#           WriteCapacityUnits: 1
#         AttributeDefinitions:
#           - AttributeName: pk
#             AttributeType: S
#         KeySchema:
#           - AttributeName: pk
#             KeyType: HASH
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
# package:
#   exclude:
#     - node_modules/**
#     - .build/node_modules/**
